sudo /etc/init.d/mysql start

mysql -uroot -p123456

show databases

use 'database'

select database 表

show　create table 表 

desc 'table'

create database 'database'
default charset=utf8;

create table 'table'
(
'pro_1' 'type' 'condition'
)default charset=utf8

type:
varchar(n)
enum('a','b',...)
int(n) unsigned zerofill
decimal(n,m)
date(now())

约束constraint:
not null
unique
primary key(pk) #==not null + unique
default 'value'
auto_increment=初始值
(alter table 表 auto_increment=值)


insert into 'table'　[(字段1,字段２...)] values
('a_1','a_2'.....),
('b_1','b_2'.....),
...

select 'pro'
from 'table'
where
group by
having
order by 'pro' 'asc/desc'
limit

update 表　set　字段数据变化表达式  where 条件
字段数据变化表达式:
a=1
a=a+b+1

alter table 'table' add 'pro' 'type' (first/after 'pro')
alter table 'table' modify 'pro' 'type' 'condition'
alter table 'table' change 'pre_pro' 'new_pro' 'type' 'conditon'
alter table 'table' rename to 'table_new'
alter table 'table' drop 'pro'

delete from 'table' where ...

constraint fk_'pro_name'
foreign key ('pro')
reference 'table' ('pro')

create table 'table'(
'pro' 'type' .....
index('pro')
unique('pro')
primary key('pro')
)default charset=utf8

alter table 'table' 
add index 'index_name'('pro')

create index 'index' on 'table'('pro')
drop index 'index' on 'table'

show index from account_trans

create table 'pro_new'
select * from 'pro' 
where (1=0) #只复制结构



导出：
select ....
into outfile '文件路径'
fields terminated by '字符分隔符＇
lines terminated by '行分割符';

输出地址查询：
show variables like 'secure_file%';

默认地址:/var/lib/mysql-files/ 

查看输出(Linix下)：
sudo cat /var/lib/mysql-files/acct.csv

导入：
load data infile '文件路径'
into table 表名
fields terminated by '字符分隔符＇
lines terminated by '行分割符';

子查询：
select * from 表名 where 字段1 
in
(select 字段1 from 表名 where 条件)
select distinct 字段　from ...　＃去重查找



连接查询：
select ... from 表１，表２　where 表１.字段= 表２.字段

多表连接字段表示方法：
表名１.字段名１,表名２.字段名１...
内,外连接：
select 多表连接字段　
from 表A (临时表名1) inner/left/right join 表B (临时表名2) 
on 关联条件
#关联条件示例：a.aa==b.aa

#外连接查询顺序：
指定方向表(left为左表)为第一表，另一个为第二表，
打印第一个表所选字段的第一个数据，
再打印所有　符合关联条件的　第二表的　所选字段的　数据
再打印第一表所选字段的第二个数据
以此类推，直至历遍第一表所有数据行，保留空值
内连接是在这基础上去除存在空值的数据行

授权:
grant 权限列表　on 库名.表名
to '用户名'@'客户端地址'
[identified by '密码']
[with grant option]
flush privileges --　此命令作用为不重启mysql服务的情况下
直接生效修改的权限

撤销授权:
revoke 权限列表 on 库名.表名
from '用户名@客户端地址'

权限列表
all privileges:所有权限
select:表示select单个权限
update:表示update单个权限
...
select,update,delete,....:分别指定权限　
库名.表名
bank.acct 表示bank库下acct
bank.* 表示bank库下所有表
*.* 表示所有库下所有表

客户端地址
% 表示所有客户端
localhost 表示本机
192.168.0.5 表示指定IP地址的机器
[with grant option]:对其他

数据库事务
事务(Transaction):数据库执行数据操作时　先存储到临时表内 
再根据情况选择执行或撤销
使用事务情况条件要求:innodb引擎
事务特性(ACID):
原子性:事务是一个整体,要么全都执行,要么全都不执行
(意外发生比如断电,事务中执行命令无效)
一致性:事务执行完成后,从一个一致状态变成另一个一致状态
(多打几次start transaction没用)
隔离性:不同的事务不会相互影响,干扰
(存在锁 事务执行时数据不会被其他数据干扰)
持久性:一旦事务提交,对数据库的修改就必须永久保留下来

start transaction　-- 开启事务
commit　　　　　　　--结束事务
rollback  --撤销事务,回到开启前状态

SQL语句分类
数据查询语言(DQL):查询数据,不改变数据
数据定义语言(DDL):定义数据结构,如建表/库,删除库/表,创建/删除索引,
修改表结构
数据操作语言(DML):对数据进行增删改
数据控制语言(DCL):权限管理事务操作数据库监视...

数据操作语言
delete
数据定义语言
truncate
drop 

锁:数据控制权
(死锁问题)(临界资源)
目的:解决　在两个独立程序同时读取同一数据时　产生的数据输出不匹配问题
方法:在一个程序在读取数据时先加锁再修改再解锁 使另一程序等待
锁类型:
读锁(共享锁):查询时加锁,加锁后可以进行读操作,不能写
写锁(排他锁):增删改时加锁，加锁后不能读写操作
锁粒度:
行级锁(细粒度):锁定某一行,并发效率高,消耗资源较多
表级锁(粗粒度):一次直接锁定一张表,并发效率低,消耗资源少

存储引擎:
什么是存储引擎:表的存储方式,包括存储机制,索引机制,锁定方式等
基本操作
show engines #查看
show create table 表 #查看某个表的存储引擎方式
指定存储引擎:
create table 表
(....)
engine=引擎名
default charset=utf8;
修改存储引擎:
alter table 表 engine==引擎名;

常用存储引擎:
Innodb
支持事务 行级锁 外键
共享表空间 ＃创建表时在文件目录下会产生以下两个文件
*.frm 表结构和索引 
*.ibd 表记录
命令查看数据存储位置:
show global variables like '%datadir%'
适用场合:
更新密集的(锁粒度小 每次锁定消耗资源少) 有如下需求的表　
事务 自动灾难备份恢复 外键约束 自增长字段(auto_increment)

MyISAM
独享表空间 (容易浪费空间)
*.frm 表结构
*.myd 表数据
*.myi 表索引
适用场合:
查询请求较多 数据一致性较低(表之间关联少) 
不要求外键约束 事务 外键 行锁定

Memory
表结构存储于硬盘, 表记录存储于内存
服务器重启后 表存在 数据消失
适用场合:
访问速度要求高


E-R模型:实体关系模型
实体: 现实中可以被区分的事物,要描述的对象(客户 账户 交易明细..)
属性: 实体所具有的数据特征(身份证号 账户号..)
关系: 实体之间的联系(开户 交易..)
一对一 一对多 多对多
属性集合构成实体 实体之间由关系连接

python访问mysql
在线　sudo pip3 install python访问mysql
离线 见讲义

pymysql
导入模块:
import pymysql 
连接:
connect('host','user','passwd','dbname',charset='utf8')#输入字段
返回连接对象,例如:
<pymysql.connections.Connection object at 0x7fefd2b17eb8>

connection 对象支持方法:
关闭数据库
close()


三层结构：
见程序
--------复习--------

关系型数据库核心：
１．关系
２．二维表


数据操作四大类型：
增　insert into
删　delete
改　update
查　select

表结构(字段)修改类型
alter table　表 +
add
drop
modify
change

查询顺序

字段约束

索引

表的复制

数据导入导出

子查询

连接查询

笛卡尔积(需要避免)

锁

存储引擎

E-R 模型

事务

pymysql

connect
