JavaScript 和Java无关
    JavaScript，浏览器解释性语言，嵌入到HTML中交给浏览解析和执行
    JS 用于实现页面动画，特效，与用户的交互(事件处理)，游戏等。
    组成：
        基础语法(ECMAScript),内置对象；
        BOM:提供操作浏览器窗口的对象和相关的方法；
        DOM:提供操作文档的方向
        自定义对象

JS引入方式
    1.元素绑定事件
        事件:用户的行为
        事件处理:对用户某种行为的响应，需要元素监听事件并作出处理
        事件分类:onclick(单击) ondblclick(双击)
    2.内嵌JS代码
        在HTML中使用<script type='text/JavaScript'></script>
        嵌入JS代码，可以书写在任意位置，书写任意次，注意不同书写位置
        可能影响代码执行的结果
    3.引入外部的JS文件
        创建.js文件，文件中书写JS代码
        语言:
            <script src='路径' type='text/JavaScript'>
            </script>
        rev 创立链接关系 即使加载失效也没有影响
        src 不可或缺的一部分
        注意：
            外链方式中内部不能再内嵌去书写JS代码，
            只执行外部文件中的代码
    4.常用的输出语句
        alert();//警告框
        prompt('');//带有输入框的弹框
            数据类型为字符串
        console.log('');//控制台输出
            *会自动换行
        document.write('');
            1.在文档中的相应位置
            (body中写入 如果写在body之前 将会添加在body开头)
            添加内容，可以识别HTML标签语法；
            2.通过元素绑定事件的方式，
            在body中插入内容，会导致页面(body)重写
            3.
    5.基础的语法规范
        1.JS中的语句可以使用“;”作为结束的标志，也可以省略
        2.JS严格区分大小写
            console.log()正确
            Console.log()错误
        3.标点符号一律为英文标点
        4.JS中添加注释:
            //单行注释
            /*多行注释
              多行注释
              多行注释*/
练习 work1:
    1.使用元素绑定事件的方式为button添加单击事件，
    实现在控制台输出 内容不限
    2.使用内嵌的方式在body的开头去写入一级标题，内容不限
    3.在外部JS中定义弹框

JS中的变量与常量
    1.变量
        存储在程序运行过程中可以动态修改的数据
        使用:
            1.访问未声明未赋值的变量，会报错
            2.访问一个使用了var关键字声明但未赋值的变量，
            默认值为undefined
            3.变量省略关键字var,直接声明并赋值,会影响变量的作用域
            不建议省略var关键字
    2.常量
        存储数据，一旦定义就不能修改
    3.命名规范
        1.变量名，常量名，函数名自定义，尽量见名知意。
        可以意由数字，字母，下划线，$组成，不能以数字开头。
        多个单词组成，使用小驼峰:username userName
        2.禁止与JS关键字冲突(var const class for 
        while switch break default function this)
        3.为了区分变量与常量，一般变量采用小写字母(小驼峰)，
        常量采用全大写字母表示
    练习：
        定义半径，定义圆周率，计算圆周长和面积
        乘法 * 输出
        小数位处理：n.toFixed(2)//对变量n保留两位小数

数据类型
    1.基础数据类型(简单类型)
        1.number 数值类型
            1.整数
                十进制:var a=100;
                八进制:var b=053;
                十六进制:var c=0x53;
                注意:不管哪一种进制最终在控制台中都以十进制输出
            2.小数
                小数点:3.14
                科学计数法:1.23e3
                    e表示10为底，后面的数字为次方数
                    前面的数字为乘数

        2.string 字符串
            字符串由一个或多个字符组成，使用""或''表示，
            每位字符都有对应的Unicode编码
            使用:
                1.charCodeAt(index)
                    获取指定下标对应的字符编码，index默认为0
                2.中文在计算机中按十六进制存储范围
                    '\u4e00'~'\u9fa5'
                3.toString(16)
                    转换为16进制表示

        3.boolean 布尔类型
            只有true/false两个值，一般用于状态的标识
        4.undefined
            变量声明为赋值，默认为undefined
            访问了对象不存在的属性，默认也为undefined
        5.null
            解除引用，可以将对象置空
    2.引用类型(复杂类型)
        对象 数组 函数 
    3.检测数据类型
        typeof n;
        typeof (n);

JS中的数据类型转换
    1.强制类型转换
        1.转换字符串类型
            方法:toString();
            返回:转换后的字符串结果
        2.转换number类型
            方法:Number(n);
            返回:转换之后的结果
            使用:
                1.数值字符串和布尔值，null都可以转换为number类型
                    true ->1
                    false->0
                    null ->0

                2.字符串中一旦出现非数字字符('hello','a1') 一律转换失败
                返回NaN(Not a Number)

                3.undefined 无法转换number 返回NaN
        3.转布尔类型
            方法:Boolean(n)
            返回:布尔值
            注意:除'零值'以外的所有制都为真,'零值'为假
                以下情况都为假:
                    0,0.0,'',null,undefined,NaN
        4.解析数据中的number部分
            方法:parseInt(n)/parseFloat(n)
            作用:解析数据中的整数部分/解析包含整数和小数
            过程:首先对数据自动转换成字符串，逐一对每位字符
            进行转number的操作，一旦转换失败，则停止向后解析
            返回结果
    2.自动类型转换
        不同类型的数据在参与运算的过程中会自动转换
        1.任意的数据类型 + string
            表示字符串的拼接，返回拼接后最终的字符串
        2.number + boolean
            将布尔值转换为number进行数学运算
            number+非字符串类型:将其他类型转number做数学运算
        3.boolean + boolean
            转换为number做数学运算
            注意:除了字符串拼接，其他情况下，都涉及将操作数转换为number，
            一旦某个操作数转换失败，即为NaN参与数学运算，结果永远是NaN
JS中的运算符
    1.赋值运算符 = 
    2.算数运算符
        + - * / %(取余) 
        1.涉及字符串 +一律为拼接 
        算式中从左往右进行数学运算 
        一旦碰到字符串 则将之前运算结果转为字符串 再进行拼接
        之后所有数据都转为字符串并拼接
            例：
                var r=15 + true +'10';//'1610'
                var r=true + undefined + '5'+true;//'NaN5true'
        2.除加法外 其他情况下 字符串参与运算
        一律自动转number进行数学运算
            *NaN参与数学运算结果一定是NaN
    3.复合运算符
        += -= *= /= %=
        例子:
            var a = 10;
            a += 1;//a = a + 1;
    4.自增，自减运算符 ++ --
        可以与变量单独结合，表示在变量自身的基础上加1或减1；
    5.比较运算符
        > >= < <= == != === !==
        1)比较运算符用来判断表达式之间的关系，结果永远是布尔值
        2)使用:
            1.number 与其他数据类型比较
                一律将非number类型自动转number，进行数值的比较
                如果转换失败，即NAN参与关系运算，结果一律为false
            2.字符串与字符串之间的比较
                逐位比较字符的Unicode码，当前位字符比较出结果则
                停止比较，返回结果
            3.boolean与其他数据类型的比较
                将操作数转number，进行值得比较
        3)相等与全等
            相等 ==:
                包含数据转换，只要值相等，都成立
            全等 ===:
                不会转换类型，只有数据类型一致并且值相等
    6.逻辑运算符
        &&与 ||或 !非
        1.连接多个表达式，最终判断出结果，返回布尔值
        2.使用:
            1.逻辑与 && 
                参与运算的表达式同时成立，最终结果才为true，全1则1
            2.逻辑或 ||
                参与运算的表达式只要有一个成立，最终结果即为true，有1则1
            3.逻辑非 !
                对表达式的结果取反，非真即假，非假即真 非零即真
练习: work2
    1.通过弹框接收用户输入年份
        var res=prompt();
        判断是否为闰年
    2.接收用户输入的一个字符
        是否为数字
        是否为字母
        是否为中文

    7.位运算符 & | ^
        1.对数据的二进制位进行操作
        2.使用：
            1.位与&
                对二进制位进行与操作(全1则1)
                例:
                    3 & 5 = 1
                      011
                    & 101
                  -------
                      001
                使用:判断操作数的奇偶，任何整数与1做位与运算，结果为1，说明为奇数；结果为0，说明是偶数
                    例:
                        3 & 1 = 1
                        4 & 1 = 0
                        
            2.位或|
                对二进制位进行或操作(有1则1)
                例:
                    3 | 5 = 7
                      011
                    | 101
                  -------
                      111
            3.异或^
                相同为0,不同为1
                例:
                    3 | 5 = 6
                      011
                    ^ 101
                  -------
                      110
                使用:
                    不借助第三方变量的情况下，互换两个变量的值，
                    执行效率比建立第三方变量的方法高得多
                        var a = 3;
                        var b = 5;
                        a = a ^ b;//6->b110
                        b = a ^ b;//110^101=011
                        a = a ^ b;//011^110=101
    8.三目运算符
        语法:表达式1 ? 表达式2 : 表达式3
        使用:
            判断表达式1是否成立?
            成立，则返回表达式2的结果
            不成立，执行/返回表达式3
        练习:work3
            1.接收用户输入的分数，判断分数区间
                >=90  A
                80-90 B
                60-80 C
                <60 D
            2.身体指数
                bmi = 体重(kg)/ (身高*身高m)
                保留两位小数
                bmi >= 23.9 肥胖
                18.5-23.9 健康
                bmi < 18.5 增肥
流程控制
    1.流程控制语句主要用来调整代码的执行顺序和执行次数
    2.分类
        1.顺序结构
            按照书写顺序从上到下依次执行
        2.选择结构(分支)
            1.if语句
                if(条件表达式1){
                    条件成立时执行
                }elseif(条件表达式2){
                    成立时执行
                }else{
                    成立时执行
                }
            练习:work4
                1.日期计算器 接收用户输入的年月日 计算是当年的第几天
            2.switch语句
                语法：
                    if用于布尔值的判断，switch不局限于布尔值，
                    用于值的匹配全等***
                    switch(a){
                        case 值1:
                            值匹配恒等之后执行的操作
                            break;//跳出匹配
                        case 值2::
                            代码
                            break
                            ...
                        default:
                            所有case都不匹配时最终执行的默认操作，一般写在末尾
                            break;(可以省略)
                    }
                特殊:
                    1.break关键字可以省略，一旦省略break，会从当前匹配到的case开始
                    向后执行所有的代码语句
                    2.多个case共用代码段:
                        case value1:
                        case value2:
                        case value3:
                        //满足以上任一情形，都会执行的代码段
                        break;
                练习:work5
                    1.改变日期计算器:
        3.循环结构
            1.while循环
                语法:
                    定义循环变量;
                    while(循环条件){
                        //条件成立，执行循环体
                        更新循环变量;
                    }
                过程:
                    1.定义循环变量
                    2.判断循环条件
                    3.条件成立，执行循环体
                    4.更新循环变量(必须)
                    5.重复2-3-4 直至条件不成立
                练习:work6
                    日期计算器while改良
            2.do-while循环
                语法:
                    //定义循环变量
                    do{
                        //循环体
                        //更新循环变量
                    }while(循环条件);
                过程:
                    1.执行循环体，更新循环变量
                    2.判断循环条件，决定是否开始下一次循环
                与while循环的区别:
                    while循环根据条件是否满足选择执行循环体
                    do-while循环不论条件是否满足，先执行一次循环体
                练习:work7
                    循环接收用户输入，并在控制台显示；直至用户输入
                    'exit'结束循环
            3.for循环
                语法:
                    for(var i = 1;i<101;i++){
                        //循环体
                    }
                循环控制:
                    1.break 跳出循环，其后的代码都不执行
                    2.continue 结束此次循环，直接开始下一次循环
                嵌套循环:
                    for(var i=1; i<10 ;i++){
                        for(var j=1; j<10; j++){

                        }
                    }
                练习:work8
                    1.控制台输出9*9乘法表
                    2.计算用户输入的年月日是星期几
                        已知:1990.1.1是星期一

函数
    1.作用:封装待执行的代码段
    2.语法:
        函数声明:
            function 函数名(参数列表){
                函数体
                return 返回值;
            }
        函数的调用:
            函数名(参数列表);
        练习:work9
            1.封装日期计算
            2.主体功能封装函数，通过按钮点击调用onclick='f1()'
            3.闰年判断封装函数
        特殊:
            1.函数名自定义，命名规范参照变量的命名规范，普通函数
            一般采用小写单词或小驼峰表示，大写字母开头的函数一般为构造函数(类)
            2.匿名函数
        作用域:
            全局作用域:函数体外部区域
            局部作用域:函数体即为局部作用域
            -------------------
            全局变量(函数):
                在函数体外部使用var关键字创建的变量都为全局变量
                在程序任意地方都可以访问
                在函数内部省略var关键字创建的变量都为全局变量(上级作用域中的变量)
            局部变量:
                在函数中使用var关键字创建的变量都为局部变量
                只能在当前函数体中使用，外界无法访问
            作用域链:
                局部作用域中访问变量，优先从当前作用域中查找
                没有的话向上级作用域中查找，直至全局作用域，称为链式查找
内置对象
    1.对象是由属性和方法组成，可以使用点语法访问属性或调用方法
    2.分类:
数组对象 Array
        练习：
            1.循环接收用户输入，存储到数组中，直至用户输入'exit'结束输入，
            在控制台中打印数组
            2.声明包含若干number值的数组，求最大值
    2.数组方法
        1.push()
            作用:在列表尾部添加元素
            返回值:添加之后的数组长度
        2.pop()
            作用:移除数组的末尾元素
            返回值:被删除的元素
        3.unshift(a,b,c)
            作用:在数组的头部添加元素
            返回值:添加之后的数组长度
        4.shift()
            作用:删除头部元素
            返回值:被删除的元素
        5.toString()
            作用:将数组转换字符串 将中括号直接变成引号
                例子:
                [1,2,3]->'1,2,3'
            返回值:字符串结果
        6.join(参数)
            作用:将数组转换成字符串
            返回值:字符串结果
            参数:选填，缺省默认为',' 等同于toString()
            用于指定元素之间的连接符
        7.reverse()
            作用:倒序重排数组元素 ，是对原始数组的直接修改
            返回值:重新排列的数组
        8.sort(函数)
            作用:对数组中的元素排序，直接修改数组结构
            返回值:排序之后的数组
            参数:函数 选填，指定排序算法，
            默认按照字符的Unicode吗升序排列
            函数例子：升序排列
            function sortASC(a,b){//自动传入相邻两个元素
                //如果a-b>0 自动交换两个元素的位置
                return a-b;
            }
            arr.sort(sortASC);
        9.  forEach(函数)
            作用：遍历数组
            参数：函数自动将数组元素及下标传入函数参数中
    3.二维数组
        数组中每一个元素又是数组
        例: [1,2,3]
            [[1],[2,3],[4,5,6]]
        读取元素：
            arr[2][1];//5
        练习：work11
            1.自定义数据源，接收用户输入的一个值，在数组查找
            并返回其对应的下标，查找失败，返回-1
            2.循环录入，倒序输出
            3.进制转换，接收用户输入的数值，转换二进制输出
                转换：除2取余，直至商为0，倒序排列数组
                6/2=3-0
                3/2=1-1
                1/2=0-1
字符串对象
    1.字符串使用引号表示，采用类似数组的存储方式，自动为每位
    字符分配下标，从0开始
    2.属性
        length 字符串长度
    3.方法
        1.转换字母的大小写
            toUpperCase() 转大写字母
            toLowerCase() 转小写字母
            返回：
                转换后的字符串，不影响原始字符串
            练习:work12     
                模拟验证码
                1.创建数组，包含大小写字母，包含数字模拟数据源
                2.生成随机四位验证码，Math.random()可以生成[0,1)
                之间的随机数
                3.提示用户输入(不区分大小写的输入)
                4.验证是否正确
                -------
                5.创建按钮，点击时提示输入验证码
                6.主功能定义函数，点击时调用
                7.生成验证码封装函数
        2.获取字符或字符编码
            charAt(index)获取指定下标的字符
            charCodeAt(index)获取指定下标的字符编码            
            参数:
                指定下标，可以省略，默认为0，越界不报错 返回NaN
        3.根据指定字符串查找对应下标
            indexOf(str[,fromindex])
                从前向后查找指定字符，找到即返回，失败返回-1
                若查找复数个字符 返回第一个字符下标
                参数:
                    str 指定查找内容，必填
                    fromIndex 指定查找的起始下标，选填
            lastindexOf(str[,fromindex])
                从后向前查找指定字符，找到即返回，失败返回-1
                若查找复数个字符 返回第一个字符下标
                参数:
                    str 指定查找内容，必填
                    fromIndex 指定查找的起始下标，选填  
        4.截取字符串
            substring(startIndex[,endIndex])
            根据指定的下标范围截取字符串 start~end-1
            参数:
                起始下标
                结束下标可以省略，表示截至末尾
            练习:work13
                1.从邮箱字符串中提取用户名及服务商
                    zhangsan@foxmail.com
                2.身份证号码中提取年月日
                    100100190012251234
        5.分割字符串
            split(parameter)
            作用:
                根据指定的分隔符，分隔字符串
            返回:
                数组
            参数:
                选填，省略的话没有分隔效果，
                只能指定字符串中存在的字符作为分隔符
            练习:work14
                101_5&201_7&301_9
                商品ID 101
                商品数量 5
        6.模式匹配
            作用:   
                借助于正则表达式实现字符串中
                固定格式内容的查找和替换
            正则表达式:regexp
                var reg1 = /正则格式/修饰符;

                *正则格式  不用加引号 没有修饰符匹配一个即停止
                修饰符:
                    i:ignorecase 忽略大小写
                    g:global 全局匹配 查找多个值
                固定内容 例:
                    var reg1 = /知乎/g;
                固定格式 
                    var reg2=/\d{6,10}/g
            字符串方法:
                1.match(str/regexp)
                    作用:
                        匹配指定的内容
                    参数:
                        str 字符串 只查找一个结果
                        regexp 正则表达式
                    返回:
                        数组，存放匹配结果
                2.replace(str/regexp,str_new)
                    作用:
                        查找指定内容并替换
                    返回:
                        替换后的字符串，不影响原始数据
                练习:work15
                    '微软公司是最早也是最大的互联网公司之一，
                    Microsoft有很多的办公软件，提供非常多的
                    microsoft服务'
                    要求统一替换其中的微软为中文显示
正则表达式对象
    1.RegExp：Regular Expression,指定字符串的组成格式
    2.属性:
        lastIndex:可读可写，表示下一次匹配的起始下标
    3.方法
        reg.test(str)
        作用
            验证字符串中是否存在满足正则格式的内容，
        返回
            true false
        注意：
            全局匹配下，重复使用同一个正则对象，验证字符串
            由于lastIndex保存下一次匹配的起始下标，导致结果有误
            可以手动调整lastIndex为0
            如果不是全局匹配 不用调
数学对象 Math
    作用：
        提供各种数学运算方法 和数学常量
        Math.random()
            返回值：生成[0,1)之间的随机小数
        Math.ceil(4.01);
            返回值：向上取整，舍弃小数位 整数位+1
        Math.floor(4.99);
            返回值：向下取整，舍弃小数位
        Math.round(4.51)
            返回值：四舍五入至整数值
    方法详细见代码22_Math

(23)
日期对象 Date
    作用:
        提供操作日期与时间相关的方法
    对象:
        new Date()
    方法:
        getFullYear()
        getYear()
        getMonth()
BOM
    1.Browser Object Model 
        浏览器对象模型，提供浏览器窗口交互的方法，
        核心为窗口对象window，跟随网页打开，自动创建，直接使用
    (24)
    2.window对象的属性和方法
        1.属性
            document，location，screen，histroy，navigator
            注意:以上属性又都为*对象类型*
                window.document.write();//window可以省略
        2.方法
            //window对象使用时可以省略，直接书写相关属性和方法
            alert('')警告框(只有确定按钮)
                无返回值
            prompt('')带有输入框的弹框
                返回值：输入内容 字符串
                    如果什么都没输入 则返回空字符串
                    点取消 返回null
            confirm('')确认框(提供确定和取消两个按钮)
                返回值：布尔值 确认true 取消false
            open('')指定URL并新建窗口打开
            close('')关闭当前窗口
            (25)
            定时器方法:
                1.setInterval 间歇调用(周期性定时器)
                    作用:
                        每隔一段时间就执行一次代码
                    开启定时器:
                        var timerID = setInterval(function,interval);
                            参数：
                                function 函数 需要执行的操作
                                interval 参数 指定时间间隔，默认以毫秒为单位
                            返回值: 
                                定时器的ID，关闭时需要
                    关闭间歇调用：
                        clearInterval(timerID);
                        根据定时器ID选择关闭

                2.setTimeout 超时调用(一次性的定时器)
                    作用:
                        等待一段时间后执行一次代码
                    开启定时器:
                        var timerID = setTimeout(function,timeout)
                            参数：
                                function 函数 需要执行的操作
                                interval 参数 指定时间间隔，默认以毫秒为单位
                            返回值: 
                                定时器的ID，关闭时需要
                    关闭定时器:
                        clearTimeout(timerID);
                作业:work16
                    1.每隔1秒在控制台输出系统时间
                    2.实现5秒的倒计时
                    3.询问用户是否需要关闭当前的窗口，
                    如果确定，3秒后关闭窗口
    3.BOM
        1.BOM主要围绕window对象，
            全局变量和全局的函数都是window对象的属性和方法
            使用时可以省略window对象
        2.window对象的属性
            以下常用属性又都是对象类型
(26,27)
            1.history
                保存当前窗口访问过的URL
                属性: 
                    length 
                        当前窗口访问过的URL数量
                方法:
                    back() 
                        返回前一个URL(后退按钮)
                    forward() 
                        前进至下一个URL(前进按钮)
                    go(n) 
                        参数可取正负值，正值代表前进几个url，
                        负值代表后退几个url
(29)
            2.location 地址
                保存或者操作地址栏的URL
                属性:
                    href 可读可写，保存当前窗口的地址栏信息；
                        如果赋值，那就是切换url，页面重定向
                方法:
                    reload(parameter)重载页面
                        参数默认为false，从缓存中加载页面
                        设置为true，强制从服务器端重载页面
            3.screen/navigator (了解)
            4.document (重点)
                详见DOM:
(30)
DOM
    1.Document Object Model,提供操作文档(html元素)的方法
        核心为document对象
    2.节点
        将文档中所有内容的内容(标签，文本，标签属性，注释)
        封装成节点对象
        分类:
            元素节点
            属性节点
            文本节点
            注释节点
            文档节点 -> document
    3.获取元素节点对象
        1.根据标签名获取节点列表(数组)
            document.getElementsByTagName('h1')[index];
            index指
        2.根据类名获取节点列表
            document.getElementsByClassName('c1');
        3.根据元素的ID属性值来获取节点对象
            document.getElementById('d1');
        4.根据表单控件的name属性值获取节点列表
            document.getElementsByName('');
    4.操作元素节点的内容
        节点对象的属性:
        1.innerHTML 读取或设置元素的文本内容，可识别标签语法
        2.innerText 读取或设置元素的文本内容，不识别标签语法
        3.value 读取或设置表单控件的值

    练习work17
        创建文本输入框 按钮和div 
        实现点击按钮式将输入框中的内容以
        一级标签
(31)
    5.操作元素属性(标签属性)
        节点对象的方法:
            1.getAttribute('attrName')
                根据指定的属性名获取属性值
            2.setAttribute('attrName','value');
                添加属性
            3.removeAttribute('attrName')
                移除指定的属性
            标签属性都为元素节点对象的属性，可以使用点语法:
                h1.id = 'd1';//set
                console.log(h1.id);//get
                h1.id=null;//remove
                注意:class为JS的关键字，不能直接使用，访问标签属性
                class时需要更名为className
            练习:
                创建超链接和按钮，点击按钮时修改超链接的链接地址
                改为http://www.tmooc.cn
(32)
    6.操作元素样式
        1.为元素添加id/class属性，对应选择器样式
        2.访问style属性，操作行内样式
        h1.style获取样式表对象，包含所有的CSS属性，
        可以再次点语法操作,CSS中所有使用连接符的属性，
        在JS中一律改为驼峰标识
    练习:work19
        创建输入框，按钮，div
        点击按钮时，验证输入内容是否在6~18位之间，用户名合法，
        就在div中以绿色文本色提示'合法'；否则在div中以红色的文本色提示‘不合法’

    7.节点的层次属性
        1.了解:读取节点信息
            nodeType 查看节点类型
            返回值:
                1 元素节点
                2 属性节点
                3 文本节点
            nodeName 查看节点的名称
                元素节点 标签名
                属性节点 属性名
                文本节点 #text
            nodeValue 查看节点对象的值
                属性节点 属性值
                文本节点 文本内容
        2.元素节点对象的层次属性
            1.parentNode
                获取父节点(父元素)
            2.childNodes
                获取子节点的数组，包含文本节点和元素节点
            3.children
                获取子节点数组 只包含元素节点 不包含文本节点
            4.nextSibling
                获取下一个兄弟节点(可以是文本节点，也可以是元素节点)
                nextElementSibling获取下一个元素兄弟节点
            5.previousSibling
                获取前一个兄弟节点()
                previousElementSibling获取前一个元素兄弟节点
            6.attributes
                获取属性节点数组
    8.节点的创建，添加和删除
        1.创建节点
            创建元素节点:
                document.createElement('标签名');
                返回创建好的元素节点:
        ---------------------------
            创建文本节点
                document.createTextNode('文本节点');
                返回文本节点
        2.添加节点
            节点的添加和移除都必须由父节点来执行
            1.在父元素的末尾添加子节点
                parentNode.appendChild(node);
            2.指定位置添加
                parentNode.insertBefore(newNode,oldNode);
                在oldNode之前插入新节点
            3.移除子节点
                parentNode.removeChild(node);
        作业:work20,work21
            1.添加元素练习 参考img-js效果图
            2.轮播图
                方式1: 元素的隐藏与显示
                //div.children
                方式2：切换路径、
(35)JS事件处理
    1.事件可以是用户的行为或者元素的状态,对用户行为的响应或是
        对元素不同状态的操作就是事件处理
    2.事件函数分类:
        窗口或元素可以监听的事件有:
            鼠标事件:
                onclick 单击
                ondblclick 双击
                onmouseover 鼠标移入
                onmousemove 鼠标移动
                onmouseout 鼠标移出
            键盘事件:
                onkeydown 按键被按下
                onkeypress 字符按键被按下
                onkeyup 按键抬起
            文档或元素加载完毕
                onload 加载完毕
            表单控件的状态监听
                oninput 监听输入
                onchange 监听表单控件值是否发生变化
                onfocus 文本框的焦点状态
                onblur 文本框的失去焦点
                onsubmit 监听提交
    3.事件绑定
        1.元素内联绑定 
            <button onclick='show()'></button>
        2.动态绑定
            节点对象.onclick = function (){};
            function show(){

            }
            btn.ondbclick=show;
        3.标准事件监听
            btn.addEventListener('click',function(){},false)
            第一个参数 省略on前缀的事件名称
            第二个参数 事件发生后执行的操作
            第三个参数 设置事件传递机制，默认false，true表示捕获，触发执行顺序 由外向内 IE不支持捕获
            事件传递
                事件可以由多个元素同时监听，事件发生后的传递顺序，默认是冒泡传递(由内向外触发)
(36)
    4.事件使用
        1.onload
            窗口加载完毕后执行相关的函数
            window.onload = function(){
                //获取元素
                console.log($('h1'));
            };
        2.鼠标事件

        3.键盘事件
            区分onkeydown和onkeypress
(37)    
        4.表单相关事件
        5.this关键字
            this用于指代事件的触发对象，函数或方法调用者
        作业:
            下拉菜单点击传值
(38)
    5.事件对象
        1.事件对象伴随事件触发自动创建，存储所有与当前事件相关的信息
            作为参数自动传入事件处理函数中，我们只需要接收
            例:
                div.onclick = function (event){
                    
                };
        2.事件对象及相关的属性
            1.鼠标事件对象
            2.键盘事件对象
                key 获取按键名称，区分字母的大小写
                which 获取按键编码
                    onkeydown事件中，功能按键对应有键盘编码
                        字符按键一律返回大写字母的ASC码
                    onkeypress事件中，区分大小写字母的ASC码
            3.target/srcElement(work21 示例)
                事件对象的属性，用来获取事件的触发对象
(39)
jQuery使用
    1.jQuery是JS的工具库，对原生的jS进行封装，DOM操作，事件处理，
        样式操作，数据处理等，提供更简洁的语法。
        网址:http://jquery.com
        中文API:http://jquery123.com
    2.使用
        1.引入jquery文件，才能使用jquery语法
        2.$() - 工厂函数
            $/jQuery 代表jQuery对象($被占用)
            工厂函数作用:
                1.获取元素节点
                    jQuery中可以使用选择器来获取元素，
                    返回jquery对象
                    jquery对象调用jquery的属性和方法，原生对象调用
                    原生的属性和方法，不能混用
                    jquery对象与原生对象互相转换
                        1.原生->jquery
                            使用$()封装:$(h1)
                        2.jquery->原生:
                            从jquery对象中根据下标取出元素，即为原生对象
                            $('h1')[0] 获取$('h1').get(0)
                2.转换原生对象
                3.节点的创建
(40)
    3.jquery获取元素
        jquery通过选择器获取元素
        选择器分类:
            1.基础选择器
                $('h1') $('#d1') $('.c1') $('body,h1,p')
(41)
            2.层级选择器
                后代选择器$('div h1')
                子代选择器$('div>h1');
                相邻兄弟选择器$('div+h1')
                    向后匹配下一个兄弟元素，要求必须满足选择器
                通用兄弟选择器$('div~h1')
                    向后匹配所有满足选择器的兄弟元素
(42)
            3.过滤选择器
                结合其他选择器使用
                1.:first
                    匹配第一个元素 例:$('p:first')
                2.:last
                    匹配最后一个元素 
                3.:even
                    匹配偶数下标对应的元素
                4.:odd
                    匹配奇数下标对应的元素
                5.:eq(index)
                    匹配指定下标对应的元素
                6.:lt(index)
                    匹配小于指定下标的元素
                7.:gt(index)
                    匹配大于指定下标的元素
                8.:not(index)
                    否定筛选
(43)
            4.属性选择器
                根据标签属性匹配元素，以[]为标志
                1.[attrName]
                    匹配包含指定属性的元素
                2.[attrName=value]/[attrName='value']
                    匹配属性名等于指定属性值的元素
                3.[attrName*=value]
                    匹配属性值中包含指定字符的元素
                4.[attrName^=value]
                    匹配属性值以指定字符开头的元素
                5.[attrName$=value]
                    匹配属性值以指定字符结尾的元素
(44)
            5.子元素过滤选择器
                1.:first-child
                    匹配第一个子元素
                2.:last-child
                    匹配最后一个子元素
                3.:nth-child(n) 从1开始计数
                    匹配第n个子元素
(45)
    4.jquery操作元素内容
        1.html('')
            读取或设置标签内容，可以识别标签语法，等价innerHTML
        2.text()
            读取或设置标签内容，不能识别标签语法，等价innerText
        3.val()
            读取或设置表单控件的值，等价value
        练习:work22
            创建输入框，按钮，div，
            点击按钮时将输入框的内容以一级标题的形式显示在div中
    5.jquery操作标签属性
        1.attr('attrName','value')
            读取或设置标签属性
        2.prop('attrName','value')
            读取或设置标签属性
        区分attr prop
            区分:大部分情况下，attr()与prop()没有区别，
            如果属性值是布尔类型，只能用prop()读取不同状态下的属性值
            例：
                按钮的选中和取消选中对应checked属性值应为
                true/false标识两种状态，用attr()获取属性值，
                只取字符串，不监听状态改变，prop()包含监听
        3.removeAttr('attrName');
            移除指定的属性
    作业:work23
        下拉菜单
        jquery轮播图的代码
（46）
jQuery 操作样式
    1.通过添加id/class属性，匹配选择器的样式
    2.针对类选择器的样式，class属性可以取多个值这种情况，
    提供专门操作class属性值的方法
        addClass('className') 添加class属性值
        removeClass('className')移除指定的class属性值
        toggleClass('className')有则删除，无则添加，动态切换
    3.操作行内样式
        1.css('propName','Value')
            设置或读取CSS样式声明，字符串形式正常书写属性名
        2.css(Json对象)
            Json对象的语法:字符串使用双引号
            {
                "color":"red",
                "font-size":"32px"
            }
(47)
层次方法获取元素
    1.parent()
        返回父元素(jquery对象)
    2.parents("selector")
        返回满足选择器的祖先元素
    3.children()/children('selector')
        返回所有的直接子元素/返回满足选择器的直接子元素
    4.find('selector')
        返回满足选择器的所有后代元素(包含直接与间接)
        不写参数返回空值 直接失败
    5.next()/next('selector')
        返回下一个兄弟元素 
        如果下一个兄弟元素满足选择器就返回
        否则查找失败
    6.previous()/previous('selector')
        返回前一个兄弟元素
        前一个兄弟元素满足选择器就返回，否则查找失败
    7.siblings()/siblings('selector')
        返回所有兄弟元素/
        返回满足选择器的所有兄弟元素

(48)
jquery创建，添加和删除元素
    1.创建节点对象
        $("<div></div>")
        $("<div><a href=''>超链接</a></div>")
    2.添加
        1.作为子元素添加
            $(parent).append($new);//追加至父元素的末尾
            $(parent).prepend($new);//添加至父元素的开头
        2.作为兄弟元素
            $obj.after($new);//在$obj的后面添加兄弟元素new
            $obj.before($new);//在$obj的前面添加兄弟元素
        3.移除
            $obj.remove();
            移除obj
(49)
jQuery绑定事件
    1.绑定方式
        1.$('div').on('click',function(){})
        2.$('div').click(function (){})
            省略on前缀后的事件名称作为方法名，直接使用
            mouseover() change()
        3.$('div').bind('click',function(){})
            底层仍然借助on()实现绑定
(50)
    2.文档加载完毕
        1.$(document):ready(function (){
            //等待文档加载完毕后执行
        })
        2.$(window).ready(functino (){
        })
        //window 可以省略
        3.$(function(){
        })
        区别:
            原生onload事件不能重复书写，会造成覆盖，
            只运行最后一次onload中的代码
            jquery中的ready()方法，可以多次使用，
            按照代码书写顺序从上到下依次执行，不会产生覆盖问题
    3.this
        this指代当前事件的触发对象，在jquery的事件处理函数中
        可以直接使用，需要注意this直接使用时原生的JS的对象
        不能调用jquery方法，需要做转换$(this)
    4.事件对象在jquery中照常使用

其他操作
    eq(index):制定下标获取jquery对象
    each(function(){
        
    }):遍历数组或节点列表
    作业:
        1.购物城中的全选和取消全选 
            思考:反选功能
        2.购物车中的数量修改
            思考:总价的联动










                



    
    
        

                    