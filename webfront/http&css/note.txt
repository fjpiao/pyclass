html
语法规范:
    1.标签不区分大小写
    2.双标签缺少其一 浏览器自动补全
    3.没有
    4.适当加注释<!--注释-->

head中的常用标签
    <meta charset='utf-8'>通过标签属性设置字符编码
    <title></title>设置网页标题
    <link rel='shortcut icon' href='路径名' type='image/x-icon'> 设置选项卡图标

body中的常用标签
    1.文本标签 标题 段落 加粗 span label
    1px:一个像素
    1em=16px
    代码换行产生空格
    2.字符实体:用来处理特殊符号
    3.容器标签<div></div>,常用于页面结构的划分
    4.列表标签:有序列表，无序列表

标签之间的关系
    标签嵌套时，产生祖先与后代的关系，父子关系，兄弟关系
    父子关系 外层元素称为父元素，内层元素称为子元素
    祖先和后代:在多级嵌套结构下，外层所有元素统称为祖先元素
    内层元素称为后代元素(直接子元素，间接子元素)
    兄弟关系:平级元素之间为兄弟关系
    例:
    <body>
        <ul>
            <li></li>
            <li></li>
        </ul>
    </body>

图片与超链接
    5.1 URL(统一资源定位符-路径)
        组成:协议 域名 文件目录 文件名 
        分类:
            绝对路径 从根目录开始逐级查找文件，以盘符或/开头的路径都为绝对路径
            相对路径 从当前文件所在的文件夹开始查找，使用../表示返回上一级目录
    5.2 图片标签
        <img src=''>在网页中插入一张图片 
        属性:
            src 必填，设置图片URL
            width/height 设置图片尺寸，取像素值，如果某个方向上缺省，浏览器会根据图片宽高比自适应
            title 设置图片的标题，鼠标悬停在图片上时显示
            alt 设置图片加载失败时的提示文本
    5.3 超链接标签
        超链接:借助于文本或图片链接到其他资源文件
        <a href=''>文本/图片</a>
        属性:
            href 必填项，指定链接地址
            target 设置目标文件的打开方式，默认取默认值_self,
            表示在当前窗口打开目标文件，可取_blank,表示新建窗口打开目标文件

HTML标签介绍
    1.超链接使用
        特殊:
            锚点链接，跳转至指定文件的指定位置
        实现:
            在指定位置添加锚点<a name='自定义锚点名称'></a>
            完善超链接的链接地址<a href='#自定义锚点名称'>人物争议</a>
            跳转至其他页面的锚点位置<a href='指定文件.html#锚点位置名称'>锚点位置</a>

    2.表格标签
        表格:
            通过结构化的行和单元格实现辅助排版或数据的展示
        语法:
            <table>
            <tr>
                <tb>table data</td>
            </tr>
            </table>
        属性:
            1.table的标签属性:
                border 设置边框 单元格也会自动添加1px边框
                width/height 设置表格尺寸 默认表格尺寸由内容决定
                如果给表格固定尺寸，会自动为单位格分配空间
                cellpadding 设置单元格内容与边框之间的距离
                cellspacing 设置边框与边框之间的距离
                bgcolor 设置背景颜色，取颜色英文单词
            2.tr的标签属性:
                bgcolor 设置行的背景颜色
                align 设置行中内容的水平对齐方式 默认居左 可取left/center/right值
                valign 设置内容的垂直对齐方式 默认居中 可取top/middle/bottom
            3.th/td标签属性
                bgcolor  
                width/height
                align
                valign

        单元格合并(重点理解):
            借助单元格的属性
                colspan(collum span)实现跨列合并
                rowspan实现跨行合并
            取无单位的数值，表示包含自身在内，合并几个单元格
            注意:
                一旦发生单元格合并 需要删除多余的单元格，保证表格结构的统一
            跨列合并:
                删除当前行中多余的单元格
            跨行合并:
                删除其后行中多余的单元格
        表格行分组:(了解)
            <table>
                <thead>
                <tr>
                    <td></td>
                </tr>
                </thead>
                <tfoot></tfoor>
                <tbody></tbody>
            </table>
        使用:
            1.结构化的分组标签根据需要添加，不是必填项
            2.默认所有的行都会自动加入tbody中
            3.推荐书写顺序为 thead tfoot tbody, 不影响表格结构，优化加载速度

    3.表单标签
        表单:结合表单控件(重点)收集用户信息并提交给服务器
        语法:
        <form>
            表单控件
        </form>  
        使用:
        1.表单元素<form></form>负责最终发送数据
            属性:
                action 设置提交地址
                method 设置数据提交方式 默认为get，可设置post
                    get请求:数据以参数的形式拼接在url后面明文传输
                    post请求:数据会被打包传输，可以传输二进制数据
                    (图片，文件，音视频...)
                enctype 设置数据编码类型，对应提交方式，默认为application/x-www-form-urlencoded
                    如果涉及二进制数据提交，需要设置提交方式为post，编码类型为multipart/form-data
        2.表单控件(重点)
            1.文本框和密码框
            2.单选钮和复选框
                文本与按钮控件的绑定:label for id
            3.隐藏域和文件选择框
                隐藏域:用户不需要了解，服务器端必需的数据可以放在隐藏域中传输，页面中对用户不可见
            4.下拉菜单(了解)
            5.多行文本域(了解)
            6.功能性按钮
                1.提交按钮
                    点击提交，会将表单中的数据按照指定的方式和指定的地址发送给后台
                2.重置按钮
                    将表单数据还原至初始化状态
                3.普通按钮
                    需要结合JS自定义处理
                4.按钮标签
                    <button>提交</button>
                    form外部的<button>为普通按钮，需要自定义JS处理事件(用户的行为)
                    form内部的<button>相当于提交

二.CSS
    1.Cascading Style Sheet 层叠样式表，HTML主要负责书写网页结构和内容，CSS调整页面布局和外观
    2.CSS使用方式
        1.行内样式(内联样式)
            借助于style标签属性书写样式代码
            例:
            <h1 style='color:red;font-size:20px;'></h1>
        2.内嵌样式表
            实现结构与样式的分离
            借助于<style type='text/css'></style>书写CSS样式声明
            样式 例
            <style>
                选择器{
                    属性:值;
                    属性:值;

                }
            </style>
            选择器:根据标签名，属性值，层级结构等方式匹配文档中的元素，为其应用样式
                例:标签选择器，根据标签名匹配文档中的所有的该元素
                    p{
                        color:red;
                    }
        3.外部的样式表
            创建.css文件 书写CSS选择器
            在HTML中借助于<link>引入外部样式表
            <link rel='stylesheet' href='路径' type='text/css'>
    3.样式表的特征
        1.层叠性
            同一个元素应用多组样式，共同起作用
        2.继承性
            子元素可以继承父元素中的某些文本样式
            例如:
                大部分的文本属性都可以被继承，超链接的文本色不能由继承得到，需要单独修改
            注意:
                块元素默认宽度与父元素保持一致
        3.优先级
            如果为同一个元素多次设置同一个样式 就产生样式冲突 此时考虑样式表的优先级:
            行内样式优先级最高:
            内嵌与外链优先级一致，依据代码的书写顺序 后来者居上
            浏览器的默认样式和继承样式 样式优先级较低
选择器介绍(重点)
    作用:
        匹配文档中的元素为其应用样式
    分类:
        1.标签选择器
            根据标签名匹配文档中的所有该元素
            语法:
                标签名{
                    属性:值;

                }
            练习:
                创建超链接，修改文本色，取消下划线
                text-decoration:none;
        2.id选择器
            根据元素的id属性值匹配文档中唯一的元素
            语法:
                #id属性值
                {

                }
            注意:
                1.id属性值自定义，可以由数字，字母，下划线，等组成
                    不能使用数字开头
                2.id具有唯一性，
        3.class选择器
            根据元素的class属性值匹配，能够实现样式的复用
            语法:
                .class属性值
                {       
                }
            特殊用法:
                1.标签选择器与类选择器结合使用
                    例:匹配类名为span的元素
                        span.c1
                2.class 属性取多个属性值，使用空格隔开，同时应用多个类选择器的样式
        4.群组选择器
            同时匹配各个选择器的元素，统一设置样式
            语法:
                选择器1，选择器2，选择器3
                {
                }
        5.后代选择器
            依托标签的层级结构，匹配所有的后代元素
            例:
            <div>
                <span></span>
                <h1>
                    <span></span>
                </h1>
            </div>
            语法:
            #选择器1表示外层元素 选择器2表示内层元素
                选择器1 选择器2{ 
                }
        6.子选择器
            依托层级关系匹配直接子元素
            语法:
                选择器1>选择器2
                {
                }
        7.伪类选择器
            为元素的某种状态设置样式，需要与基础选择器结合使用，
            表示元素的某种状态
            分类:
                :link 超链接访问前
                :visited 超链接访问后
                :hover 鼠标悬停
                :active 鼠标点按不抬起(激活状态)
                :focus 焦点状态(输入框处于编辑状态)
        8.常用设置:
            a{ #统一设置超链接四种状态下的默认样式
                color:gray;
                text-decoration:none;
            }
            a:hover{
                color;
                background-color;
            }
            练习:
            1.创建超链接 设置默认文本色为白色 背景色为橘色 取消下划线 鼠标悬停时修改背景色
            2.创建div 设置尺寸为200*200 (width/height) 设置背景色 实现鼠标悬停时修改尺寸为300*300 修改背景色
            3.下拉菜单隐藏与显示
                display:none; 元素隐藏 
                display:block; 元素显示

    选择器的优先级
        使用不同的选择器为同一元素设置样式，发生冲突时考虑选择器的优先级，由权重决定
            标签选择器 1
            类/伪类   10
            id选择器  100
            行内样式  1000+
        注意:    
            群组选择器中，各个选择器由自身的权重决定:
            后代，子代选择器的优先级由各组成部分的权重相加得到
            例:
                body,#d1,.c1{}
                body div{}
    标签分类及嵌套
        标签分类:
        常用的块级元素有：div，p，h1 ~h6；常用的行内元素有：span,I,b,s,u
            1.块元素
                特点:
                    独占一行，不与其他元素共行;
                    可以手动调整宽高，默认宽度与父元素保持一致
                例:h1-h6 p div ul ol li form table(默认宽度由内容决定)
            2.行内元素
                特点
                    可与其他元素共行显示
                    不能手动调整宽高，尺寸由内容决定
                例: a b strong span label i s u sub sup
            3.行内块元素
                特点
                    既可以共行显示，又能手动调整宽高
                例:
                    img input 
            4.转换元素类型
                属性:display
                取值:inline(行内元素)/block(块元素)/inline-block(行内块元素)/none(隐藏)
        标签嵌套:
            1.块元素中可以嵌套任意类型的元素
            特殊:段落标签中不能嵌套块元素，只能嵌套行内/行内块元素
            2.行内元素中尽量只嵌套行内(行内块)元素
四.尺寸与颜色
    1.尺寸单位
        px 默认使用像素
        % 默认参照父元素相应的属性值进行百分比计算
        em 参照父元素的字体大小计算 默认1em=16px
        rem 参照文档根元素的字体大小计算 默认1em=16px
    2.颜色取值
        取颜色的英文单词
        rgb(r,g,b)取三原色设置，每种颜色取值范围0-255
            例:
            black rgb(0,0,0)
            white rgb(255,255,255)
        rgba(r,g,b,alpha)设置三原色及透明度，alpha取值0(透明)-1(不透明)
        颜色的十六进制表示
            将三原色的范围0-255转换成十六进制表示
            (00-ff)
            使用:
                长十六进制，每两位为一组代表一种三原色
                #ff0000 red
                短十六进制，采用三位字符代表三原色，浏览器会自动对每一位进行重复，最终完善为十六进制
                #0f0

    内容尺寸与溢出处理
    1.尺寸属性
        width/height:取像素值或百分比，用来设置内容区域的大小
    2.溢出处理
        溢出:内容超出尺寸范围，称为溢出，默认溢出部分仍然可见
        可借助overflow属性调整溢出内容的显示
        属性:overflow
        取值:visible(默认可见)
             hidden(隐藏溢出部分)
             scroll(强制在水平和垂直方向添加滚动条)
             auto(自动在溢出方向添加可用的滚动条)
    
盒模型(框模型)
    1.盒模型包含内容区域:
        padding(内边距)，border(边框)，margin(外边距)，
        关系元素在文档中的实际占位，影响排版布局
    2.内容区域:
        使用width/height属性设置(按钮元素除外)
    3.边框设置:
        边框实现
            border:width style color;
            边框样式可取:solid(实现)/dashed(虚线)/dotted(点线)/double(双线)
        单边框的设置
            border
                属性用于统一设置四个方向的边框，可以借助以下属性实现单边框设置;
            border-top
                上边框
            border-right
                右边框
            border-bottom
                下边框
            border-left
                左边框
        取值:width style color;
        网页三角标制作
            1.设置元素尺寸为0
            2.分别添加四个方向的边框，保留一个可见色，其他为透明色
            3.三角标的大小可通过边框宽度调整
        
        轮廓线
            1.边框在文档中实际占位，而轮廓不占位
                属性:outline
                取值:color style width
                特殊:输入框在编辑状态自带轮廓线，可以设置
                outline:none;取消轮廓线
            2.圆角边框
                属性:
                    border-radius
                取值:
                    像素值 设置圆角半径:取百分比
                    参照元素自身宽高属性计算圆角半径
                取值范围:
                    1.统一设置四个角的圆角半径，最大取50% 改变元素形状(超过50%仍然显示50%的效果)
                    2.单独设置每个角的圆角半径0%-100%

            3.盒阴影
                属性:
                    box-shadow:offsetX offsetY blur (spread) color
                取值:
                    offsetX offsetY 
                        偏移距离 左上角为0,0点 向右向下为正方向
                    blur 
                        取像素值 模糊程度 越大越模糊
                    (spread) 
                        取像素值 阴影延伸距离
                    color 
                        颜色
    4.外边距设置
        外边距:
            元素边框与边框之间的距离
        属性
            margin: 像素值
            一个值 设定总体
            两个值 上下值 左右值
            三个值 上值 下值 左右值
            四个值 上-右-下-左
        取值
            像素值
        特殊值
            1.margin:0;清除默认外边距
            2.margin:0 auto;上下外边距自定义，左右外边距自动
                实现元素在父元素范围内，水平居中
            3.取负值，用于元素位置的微调
                单方向外边距设置
                属性:
                    margin-top/margin-right/margin-bottom/margin-left
                取值:
                    取像素值 只取一个值
        外边距合并
            1.垂直方向
                1.子元素的margin-top作用于父元素上
                    解决:
                        1.为父元素设置顶部透明边框
                        2.为父元素添加padding-top:0.1px;
                2.垂直方向上元素同时设置上下的外边距，发生外边距合并，取较大的值

            2.水平方向上的外边距
                行内元素对盒模型的相关属性不完全支持，不能设置宽高，不能添加上下边距
                水平方向上的外边距会叠加显示
            
            具有默认外边距的元素
                body,h1,h2,h3,h4,h5,h6,p,ul,ol{
                    margin:0;
                }
    5.内边距设置
        内边距:
            设置元素的内容区域与边框之间的距离
        属性:
            padding
        取值:
            像素值 取值规律和外边距一致
        单方向的内边距属性:
            padding-top/padding-right/padding-bottom/padding-left
        注意:
            块元素对盒模型的属性完全支持，行内元素对盒模型的属性部分支持
            不支持宽高，不支持上下边距
        具有默认内边距的元素:
            body,h1,h2,h3,h4,h5,h6,p,ul,ol{
                    margin:0;
                    padding:0;
                    list-style:none;
                }
    6.元素尺寸计算
        属性:
            box-sizing
        取值:
            1.content-box 默认值
                width/height设置内容框的尺寸，
                元素最终在文档中的实际尺寸由盒模型相关属性累加得到
            2.border-box 按钮的默认计算方式
                width/height设置包含边框在内的区域大小，内容框的尺寸会随着
                边框和内边距设置，自动调整
        练习:
            模拟百度搜索框和按钮
            搜索框最终500*36，1px边框
            按钮100*36
            按钮背景色为#3385ff，文本色为白色

css布局方式
    1.文档流/静态流/标准流
        默认布局方式:根据元素类型和书写顺序，从上到下，从左至右依次显示
    2.浮动布局
        属性:float
        取值:left/right/none(默认)
        特点:
            1.浮动元素从它在文档中的原始位置脱离文档流，'漂浮'在父元素的上方
              按照浮动方向依次停靠在其他元素的边缘，如果父元素尺寸不够，会自动换行显示
            2.浮动元素脱流，在文档中不占位，导致后面正常元素向前占位，并且影响父元素高度
            3.自带'文字环绕'效果，常用于图文混排，设置图片浮动，后面正常的文本元素
              会向前占位，文本内容会围绕浮动元素显示
            4.单个的浮动元素与行内元素共行显示，类似文字环绕效果
            5.元素设置浮动，就可以设置宽高
    问题:
        1.浮动元素不占位，后面正常的元素向前占位，影响布局
            解决:清除浮动
            属性:clear
            取值:left/right/both;
            使用:为正常元素添加clear属性，使其不受前面左浮元素/右浮元素/浮动元素不占位，后面正常的元素向前占位，影响布局
        2.浮动元素不占位，影响父元素的高度，进而影响布局
            常见:子元素全部浮动，导致父元素高度为0
            解决:
                1.内容固定时，可以为父元素固定高度
                2.内容不固定时，可以为父元素设置overflow:hidden;
                3.在父元素末尾添加空的块元素，设置clear:both;
    3.定位布局
        属性:position
        取值:relative/absolute/fixed/static(默认值)
        已定位元素:设置position取值为relative/absolute/fixed,
        元素才称为(已定位元素)
        使用:
            1.relative(相对定位)
                元素设置相对定位之后，在文档中仍然占位，
                可以借助于偏移属性进行定位
                参照元素本身在文档中的原始位置进行偏移。
                偏移属性:
                    top
                    left
                    right
                    bottom
            2.absolute(绝对定位)
                元素设置绝对定位,会脱离文档流 在文档中不占位
                参照离他最近的已定位的祖先元素进行偏移，
                如果没有已定位的祖先元素，则参照浏览器窗口进行偏移
                常见使用:
                    父元素相对定位，子元素绝对定位，实现子元素在父元素范围内偏移
            3.fixed(固定定位)
                元素设置固定定位，参照浏览器窗口进行偏移，在文档中不占位
                固定定位的元素不跟随页面滚动而滚动
            4.调整已定位元素的堆叠次序
                属性: z-index
                取值:取无单位的数值,值越大越靠上 已定位才有效
                使用:
                1.已定位元素与文档流中的元素发生堆叠，已定位元素显示在上方
                2.同为已定位元素，发生堆叠，默认按照代码顺序，后来者居上
文本属性
    1.字体样式
        font-size:设置字体大小
        font-weight:设置字体的粗细程度，取bold(加粗)/normal(正常)
            也可以使用整百数值表示粗细程度 400(normal)/700(bold)
        font-style:设置斜体，取italic表示斜体
        font-famliy:设置字体名称，取字体名称，如果字体名称中出现了空格或是中文
            必须加引号;
            以防字体库中不存在字体，可以设置备用字体
            多个字体名称之间使用逗号','隔开，用于设置备用字体
            例：
                font-famliy:'黑体',Arial;
                font-famliy:'Microsoft YaHei';
                font-famliy: Arial;
        简写属性:
            font:style weight size famliy;(按顺序书写)
            注意:size 和 famliy是必填项

    2.文本样式
        color:设置文本色
        text-decoration:设置文本装饰线 
        none/underline/overline/line-through
        text-align:设置文本水平对齐,取left/center/right/justify(两端对齐)
        line-height:设置行高与高度保持一致，实现文本的垂直居中
            多行文本之间，使用line-height调整行间距，可取像素值或无单位的数值，
            表示当前字体大小的倍数，以此计算行高
            字体属性的简写:
                font:style weight size/line-height famliy;

背景属性
    1.背景颜色
        background-color
    2.背景图片相关
        background-image:url('');
        background-repeat:
            repeat(默认沿水平和垂直两个方向去重复平铺)
            repeat-x 沿水平方向重复平铺
            repeat-y 沿垂直方向重复平铺
            no-repeat 不重复
        background-position:x y;
            像素值
                设置背景图片在元素坐标系中的显示位置，默认从
                (0,0)点,左上角显示,超出元素尺寸部分不可见
            方位值
                水平:left/center/right
                垂直:top/center/bottom
                注意:缺省某个方向，默认为center
            百分比
                0% 0%:左上角
                50% 50%:居中
                100% 100%:右下角
            精灵图技术:
                为了减少网页请求，通常将一组图标拼在一张图片上，一次请求全部得到。
                借助于background-position调整图标显示
            background-size:width height;
                设置背景图片尺寸
                像素值表示宽高
                百分比计算宽高
                    参照元素的对应属性值计算背景图片的大小
    3.背景属性简写
        background:color url() repeat position;
        背景图片的尺寸单独设置;       

表格属性
    1.border-spacing:h v;
        设置边框之间的距离,两个值分别代表水平和垂直方向上的边框距离
        一个值表示统一设置水平和垂直方向的距离，只能在边框分离状态下设置边距
    2.border-collapse:separate/collapse;
        设置边框合并,默认边框分离,可以设置collapse合并;

列表属性
    list-style:none; 取消列表的项目符号

显示属性
    display:inline/inline-block/block/none;
        设置元素隐藏，在文档中不占位
    visibility:visible/hidden;
        设置元素隐藏，在文档中占位
    cursor:设置鼠标在元素上的显示形状
        default 箭头形状(按钮,图片)
        pointer 手指形状(超链接)
        text 文本信息,显示为'I'
    opacity:设置元素的透明度,取值0~1 (透明~不透明) 
        设置的是元素整体的半透明 包含元素自身及后代元素

CSS3属性(加入时间元素)
    1.过渡效果
        在元素两种状态下切换样式 借助于transition属性增加平滑过渡效果
        了解；
            transition-duration:设置过渡时长，取s(秒)或ms(毫秒)为单位的数值
                1s=1000ms
            transition-property:设置过渡属性，单独为指定的css属性添加过渡效果，
                可取all或其他的css属性名
            transition-timing-function:设置过渡效果变化速度
            transition-delay:设置延迟，取时间值
        注意:
            transition:property duration timing-function delay;
                duration为必填项
                 简写:transition:5s;
    2.转换属性
        实现元素的平移，旋转和缩放
        属性：
            transform 
        取值:转换函数
            1.平移
                translate(x,y)
                指定水平和垂直的偏移距离，正负值代表平移方向
            2.旋转
                rotate(ndeg)
                指定元素的旋转角度，单位为deg，正负值代表顺逆方向
            3.缩放
                scale(n)
                指定缩放比例，取无单位的数值
                n>1 放大
                0<n<1 缩小
                n<0 数值代表比例 负号会造成元素翻转
        转换的基准点
            默认基准点为元素的中心点
            transform-origin:x y;设置元素的转换基准点
            

        
        



        

            
            
            
    


        




